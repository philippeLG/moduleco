/**
 * Title: explorationExploitation.Market.java
 * Description: medium concept applied to economic market
 * @author Philippe.legoff@enst-bretagne.fr
 * @version 1.2  august,5, 2002
 */

   package models.explorationExploitation;

   import java.util.ArrayList;
   import java.util.Iterator;

// import modulecoFramework.modeleco.EAgent;
   import modulecoFramework.medium.Medium;

   public class Market extends Medium {
      protected int nbSellers ;		// Number of competitors on the market
              // number of subscriptors (customers) per competitor
      public double price;          // consumption price per competitor
   
   
   
      protected boolean bool;
   /**
    * constructor
    */
      public Market () {
         super();
         //System.out.println(" MarketConstructor ");
      }
   
    /*
     * Seller services
     */
   /*
      public int getCustomers(int competitorID){
         //System.out.println("market.Customers()"+" N("+competitorID+") = "+N[competitorID-1]);
         return N[competitorID-1];
      }
   	*/
   /**
   * method called by agent.compute() ???????
   * the market provide the usage price vector to each agents
   */
   
      public double getPrice(){
         //System.out.println(" market.getPrice ");
         return price;
      }
   /*
      public void givePrice(double p, double s, int competitorID) {
         //System.out.println(" market.givePrice ");
         price[competitorID-1] = p;
         subscription[competitorID-1] = s;
      }
   */
    /**
     * Agent services
     * buy() implemented by agent.commit()
     */
      public void buy(int agentID, int newSellerID, double q){
         //if (newSellerID>0) {
            //Q[newSellerID-1] += q;
            //N[newSellerID-1]++;
            //if (agentID==0)
               //System.out.println(" market.buy() to agent " + agentID + " buy "+ q + " to " + newSellerID + "; total "+Q[newSellerID-1]);
         //}
      }
   
    /**
     * get number of competitors
     * method called from init(), agent.compute()
     */
   // l'appel depuis agent.compute() a chaque tour ralentit le temps de calcul :
   // discuter pour voir s'il ne vaut mieux pas le faire dans agent.int()ou agent.getInfo() 
   
      public int getNbSellers () {
         int nbSellers =((ArrayList) refTable.get("seller")).size();
         //System.out.println(" market.getNbSellers () / return : "+nbSellers);
         return nbSellers ;
      }
   
    /**
     * Market initialization
     */
      public void init(){
         //System.out.println("market.init()-DEBUT");
         nbSellers = getNbSellers ();
         bool=true;
      
         //price = new double[nbSellers];
      
      
        // marketClear();
         for (Iterator i=this.getAgentsForRole("seller").iterator();i.hasNext();){
            ((Seller) i.next()).setMenuPrice();
         }
         //System.out.println("market.init()- SELLERS / OK");
         for (Iterator i=this.getAgentsForRole("customer").iterator();i.hasNext();)
            ((Agent) i.next()).marketOpen();
      
      
         //System.out.println("market.init()-FIN");
      }
   
   
      public void getPrice(int prix){
         //System.out.println(" market.getPrice ");
         price = new Integer(prix).doubleValue();
      }
   
   
      public double sendPrice(){
         return price;
      }
   
   
      public void getResultatTransaction(boolean z){
      
         //System.out.println("resultat "+z);
      
         bool = z;
      
      }
   
   
   
   
   
      public boolean sendResultatTransaction(){
      
         //System.out.println("resultat2 " + bool);      
            //System.out.println("resultat2 "+bool);
         return bool;
      
      
      
      }
   
   /**
   * Clear All market data : 
   * quantities Qi, Ni,
   * prices pi, Ai 
   * for all competitors
   * implemented from world.commit()
   */
   // il y a 2 market clear a chaque tour voir : ???
      public void marketClear(){
      
         //System.out.println("marketClear()");
      
      }
   
   }
