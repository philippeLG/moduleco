/** class explorationExploitation.Agent.java
 * Title:        Moduleco<p>
 * Description:
 * Copyright:    Copyright (c)enst-bretagne
 * @author denis.Phan@enst-bretagne.fr , Philippe LeGoff
 * @version 1.2  august,5, 2002
 */

   package models.explorationExploitation;

   import java.util.Iterator;
   import java.util.ArrayList;

   import modulecoFramework.modeleco.EAgent;
   import modulecoFramework.modeleco.randomeco.CRandomDouble;
// import modulecoGUI.grapheco.descriptor.DataDescriptor;
   import modulecoGUI.grapheco.descriptor.DoubleDataDescriptor;
// import modulecoGUI.grapheco.descriptor.BooleanDataDescriptor;
// import modulecoGUI.grapheco.descriptor.IntegerDataDescriptor;

   import modulecoFramework.medium.NeighbourMedium;
// import modulecoFramework.medium.Medium;


   public class Agent extends EAgent {
    /**
     * state is the actual state . stateC is the computing state
     */
      protected int  state, stateC, previouState ;    // values : 0 nothing, 1 first company, 2 second company ....
      /**
   	*
   	*/
   
      //protected int numCompetitor, nbCompetitors ; // id & number of competitors
     /**
     * subscription and usage price
     */
      protected double price;
   /**
     * idosyncrasics Agent's parameters
     */
      protected double theta ;
   	/**
   	*
   	*/
      protected CRandomDouble random;
      /**
   	*
   	*/
      protected Market market;
   
      protected int beta[];
   
      public boolean choix[];
   //Part I - Initialisation of the agent =================
   /**
   * COMMENTER LE CONSTRUCTEUR
   */
      public Agent() {
         super();
         ///if (agentID==1)
            //System.out.println(" agent.constructeur ID = "+agentID);
      
      
      
      }
   /**
   * 
   */
      public void getInfo() {
      
         //if (agentID==0)
            //System.out.println(" agent.getInfo() ");
      
         this.random      = ((World) world).random;
      }
   /**
   *
   */
   
      public void init() {
         //if (agentID==0)
            //System.out.println(" agent.init() ");
         // personal information
          // non subscriber
         neighbours = ((NeighbourMedium) mediums[0]).getNeighbours();
      
         previouState = 0;
         stateC = 0;
         theta = random.getDouble(); //idiosyncrasic individual coefficient
      // environmental information
         //neighbours = ((NeighbourMedium) mediums[0]).getNeighbours();
         market = ((World) world).getMarket();
         //nbCompetitors = market.getNbCompetitors();
         //N = new double[nbCompetitors];
         getInfo();
      
      
      
         choix = new boolean [11];
      
        // System.out.println(choix[9]);
      
      }
      public void setChoix(int k,boolean e){
      
         choix[k]=e;   
      //System.out.println("choix prix "+k+"  "+e);
      
      
      }
   
      public void marketOpen(){
      
         //if (agentID==0)
            //System.out.println(" agent.marketOpen() ");
      
      }
   			/**
   	*
   	*/
   
   
   // Part II - Agent's computations
   /**
   *
   */
   
   /**
   *
   */
      public void compute() {
         //if (agentID==0)
          //  System.out.println(" agent.compute() ");
         //int prix = new Double(market.sendPrice()).intValue();
         //market.getResultatTransaction(nbrebernouilli(prix));
         int prix;
         prix = new Double(market.sendPrice()).intValue()  ;
         boolean z = choix[prix];
         market.getResultatTransaction(z);
         //System.out.println("prix  "+prix);
         //System.out.println("reponse  "+z);
      
      
      
         //System.out.println("resultat "+choix[new Double(market.sendPrice()).intValue()]);
         Agent A;
         for (Iterator i = neighbours.iterator();i.hasNext();) {
            A = (Agent) i.next();
            for (int k=(prix+1) ; k<11 ; k++){
               A.setChoix(k,false); }
         }
         //for (int k=(prix+1) ; k<11 ; k++){
            //setChoix(k,false); }
      
         stateC = 1; 
      
      }
   	/**
   	*
   	*/
   
   
   
   
   
      public void commit() {
         //if (agentID==0)
            //System.out.println(" agent.commit() ");
         previouState = state;
         state = stateC;
         //market.buy(agentID, state, q);
      }
   // Part III - Data Exchanges =================
   /**
   *
   */
      public void setPrice(){
         //if (agentID==0)
            //System.out.println(" agent.setPrice() ");
         price = market.getPrice();
      }
   /**
     * Return stable state (Competitor number)
   * methode call from XXX at each Canevas update (including between iterations)
     */
      public Object getState() {
         //System.out.println(" agent.getState() ");
         return new Integer(stateC);
      }
    /**
     * Return boolean state  (buy or no) >> DOUBLE EMPLOI AVEC PRECEDENT ?
     */
      public Object getBooleanState() {
         //System.out.println(" agent.getBooleanState() ");
         return new Boolean(stateC == 0 ? false : true);
      }
   /**
   *
   */
   
      public String toString() {
         //System.out.println(" agent.toString() ");
         return (new Integer(state)).toString();
      }
   /**
   *
   */
      protected void setTheta(double newTheta) {
         //if (agentID==0)   
            //System.out.println(" agent.setTheta() ");
         theta =newTheta;
      }
   /**
   *
   */             
      public double getTheta() {
         //if (agentID==0)
            //System.out.println(" agent.getTheta() ");
         return theta;
      }
   /**
   *
   */
      public void setRandom(CRandomDouble random) {
         //if (agentID==0)
            //System.out.println("agent.setRandom() ");
         this.random = random;
      }
   
   /**
   *
   */
      public void inverseState() {           
         state = 0; stateC = state;
        //if (ae != null) ae.update ();
      }
   /**
   *
   */
      public ArrayList getDescriptors(){
      
         descriptors.clear();
         //descriptors.add(new IntegerDataDescriptor(this,"State","state",state,false));
         //descriptors.add(new BooleanDataDescriptor(this,"Has changed","hasChanged",hasChanged,false));
         descriptors.add(new DoubleDataDescriptor(this,"Theta","theta",theta,false,6));
            //if (agentID==0)
            //System.out.println(" agent.getDescriptors");
         return descriptors;
         //return new ArrayList(); ???
      }
   }